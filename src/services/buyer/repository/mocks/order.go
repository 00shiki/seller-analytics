// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/tokopedia-workshop-2022/seller-analytics-solution/src/services/buyer/domain"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetOngoingOrders mocks base method.
func (m *MockOrderRepository) GetOngoingOrders(ctx context.Context, buyerId uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOngoingOrders", ctx, buyerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOngoingOrders indicates an expected call of GetOngoingOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOngoingOrders(ctx, buyerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOngoingOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOngoingOrders), ctx, buyerId)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepository) GetOrderByID(ctx context.Context, id uint) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByID), ctx, id)
}

// GetOrdersByBuyerID mocks base method.
func (m *MockOrderRepository) GetOrdersByBuyerID(ctx context.Context, buyerId uint) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByBuyerID", ctx, buyerId)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByBuyerID indicates an expected call of GetOrdersByBuyerID.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByBuyerID(ctx, buyerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByBuyerID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByBuyerID), ctx, buyerId)
}

// GetProductByID mocks base method.
func (m *MockOrderRepository) GetProductByID(ctx context.Context, id uint) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockOrderRepositoryMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockOrderRepository)(nil).GetProductByID), ctx, id)
}

// GetProducts mocks base method.
func (m *MockOrderRepository) GetProducts(ctx context.Context) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockOrderRepositoryMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockOrderRepository)(nil).GetProducts), ctx)
}

// InsertOrder mocks base method.
func (m *MockOrderRepository) InsertOrder(ctx context.Context, order domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", ctx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockOrderRepositoryMockRecorder) InsertOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockOrderRepository)(nil).InsertOrder), ctx, order)
}

// PublishOrderEvent mocks base method.
func (m *MockOrderRepository) PublishOrderEvent(ctx context.Context, event domain.PayloadEventOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishOrderEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishOrderEvent indicates an expected call of PublishOrderEvent.
func (mr *MockOrderRepositoryMockRecorder) PublishOrderEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishOrderEvent", reflect.TypeOf((*MockOrderRepository)(nil).PublishOrderEvent), ctx, event)
}

// UpdateOrderById mocks base method.
func (m *MockOrderRepository) UpdateOrderById(ctx context.Context, order domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderById", ctx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderById indicates an expected call of UpdateOrderById.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderById(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderById", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderById), ctx, order)
}
