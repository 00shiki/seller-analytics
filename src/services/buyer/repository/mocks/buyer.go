// Code generated by MockGen. DO NOT EDIT.
// Source: buyer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/tokopedia-workshop-2022/seller-analytics-solution/src/services/buyer/domain"
)

// MockBuyerRepository is a mock of BuyerRepository interface.
type MockBuyerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuyerRepositoryMockRecorder
}

// MockBuyerRepositoryMockRecorder is the mock recorder for MockBuyerRepository.
type MockBuyerRepositoryMockRecorder struct {
	mock *MockBuyerRepository
}

// NewMockBuyerRepository creates a new mock instance.
func NewMockBuyerRepository(ctrl *gomock.Controller) *MockBuyerRepository {
	mock := &MockBuyerRepository{ctrl: ctrl}
	mock.recorder = &MockBuyerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuyerRepository) EXPECT() *MockBuyerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuyerRepository) Create(ctx context.Context, buyer domain.Buyer) (*domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, buyer)
	ret0, _ := ret[0].(*domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBuyerRepositoryMockRecorder) Create(ctx, buyer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuyerRepository)(nil).Create), ctx, buyer)
}

// Get mocks base method.
func (m *MockBuyerRepository) Get(ctx context.Context, buyer domain.Buyer) (*domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, buyer)
	ret0, _ := ret[0].(*domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBuyerRepositoryMockRecorder) Get(ctx, buyer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBuyerRepository)(nil).Get), ctx, buyer)
}

// GetByUsername mocks base method.
func (m *MockBuyerRepository) GetByUsername(ctx context.Context, username string) (*domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockBuyerRepositoryMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockBuyerRepository)(nil).GetByUsername), ctx, username)
}
