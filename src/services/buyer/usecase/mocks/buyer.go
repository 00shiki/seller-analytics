// Code generated by MockGen. DO NOT EDIT.
// Source: buyer.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/tokopedia-workshop-2022/seller-analytics-solution/src/services/buyer/domain"
)

// MockBuyerUsecase is a mock of BuyerUsecase interface.
type MockBuyerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBuyerUsecaseMockRecorder
}

// MockBuyerUsecaseMockRecorder is the mock recorder for MockBuyerUsecase.
type MockBuyerUsecaseMockRecorder struct {
	mock *MockBuyerUsecase
}

// NewMockBuyerUsecase creates a new mock instance.
func NewMockBuyerUsecase(ctrl *gomock.Controller) *MockBuyerUsecase {
	mock := &MockBuyerUsecase{ctrl: ctrl}
	mock.recorder = &MockBuyerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuyerUsecase) EXPECT() *MockBuyerUsecaseMockRecorder {
	return m.recorder
}

// IsUserAuthenticated mocks base method.
func (m *MockBuyerUsecase) IsUserAuthenticated(ctx context.Context, buyerId uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserAuthenticated", ctx, buyerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserAuthenticated indicates an expected call of IsUserAuthenticated.
func (mr *MockBuyerUsecaseMockRecorder) IsUserAuthenticated(ctx, buyerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserAuthenticated", reflect.TypeOf((*MockBuyerUsecase)(nil).IsUserAuthenticated), ctx, buyerId)
}

// Login mocks base method.
func (m *MockBuyerUsecase) Login(ctx context.Context, username string) (*domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username)
	ret0, _ := ret[0].(*domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockBuyerUsecaseMockRecorder) Login(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockBuyerUsecase)(nil).Login), ctx, username)
}

// Orders mocks base method.
func (m *MockBuyerUsecase) Orders(ctx context.Context, buyerId uint) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", ctx, buyerId)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockBuyerUsecaseMockRecorder) Orders(ctx, buyerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockBuyerUsecase)(nil).Orders), ctx, buyerId)
}
