// Code generated by MockGen. DO NOT EDIT.
// Source: statistics.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"
        time "time"

        gomock "github.com/golang/mock/gomock"
        domain "github.com/tokopedia-workshop-2022/seller-analytics-solution/src/services/statistic/domain"
)

// MockStatisticsUsecase is a mock of StatisticsUsecase interface.
type MockStatisticsUsecase struct {
        ctrl     *gomock.Controller
        recorder *MockStatisticsUsecaseMockRecorder
}

// MockStatisticsUsecaseMockRecorder is the mock recorder for MockStatisticsUsecase.
type MockStatisticsUsecaseMockRecorder struct {
        mock *MockStatisticsUsecase
}

// NewMockStatisticsUsecase creates a new mock instance.
func NewMockStatisticsUsecase(ctrl *gomock.Controller) *MockStatisticsUsecase {
        mock := &MockStatisticsUsecase{ctrl: ctrl}
        mock.recorder = &MockStatisticsUsecaseMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsUsecase) EXPECT() *MockStatisticsUsecaseMockRecorder {
        return m.recorder
}

// GetStatistics mocks base method.
func (m *MockStatisticsUsecase) GetStatistics(ctx context.Context, date time.Time) (*domain.Statistics, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetStatistics", ctx, date)
        ret0, _ := ret[0].(*domain.Statistics)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockStatisticsUsecaseMockRecorder) GetStatistics(ctx, date interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockStatisticsUsecase)(nil).GetStatistics), ctx, date)
}

// HandleOrderEvent mocks base method.
func (m *MockStatisticsUsecase) HandleOrderEvent(arg0 domain.PayloadEventOrder) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "HandleOrderEvent", arg0)
}

// HandleOrderEvent indicates an expected call of HandleOrderEvent.
func (mr *MockStatisticsUsecaseMockRecorder) HandleOrderEvent(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOrderEvent", reflect.TypeOf((*MockStatisticsUsecase)(nil).HandleOrderEvent), arg0)
}